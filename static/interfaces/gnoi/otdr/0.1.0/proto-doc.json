{
  "files": [
    {
      "name": "otdr.proto",
      "description": "",
      "package": "gnoi.optical",
      "hasEnums": true,
      "hasExtensions": false,
      "hasMessages": true,
      "hasServices": true,
      "enums": [
        {
          "name": "FiberTypeProfile",
          "longName": "FiberTypeProfile",
          "fullName": "gnoi.optical.FiberTypeProfile",
          "description": "Type definition for different profiles of fiber types. These match what is\nalready defined in OpenConfig under the FIBER_TYPE_PROFILE identityref in\nopenconfig-optical-amplifier.yang model.",
          "values": [
            {
              "name": "FTP_UNKNOWN",
              "number": "0",
              "description": ""
            },
            {
              "name": "FTP_DSF",
              "number": "1",
              "description": "Dispersion shifted fiber."
            },
            {
              "name": "FTP_LEAF",
              "number": "2",
              "description": "Large effective area fiber."
            },
            {
              "name": "FTP_SSMF",
              "number": "3",
              "description": "Standard single mode fiber."
            },
            {
              "name": "FTP_TWC",
              "number": "4",
              "description": "True wave classic fiber."
            },
            {
              "name": "FTP_TWRS",
              "number": "5",
              "description": "True wave reduced slope fiber."
            },
            {
              "name": "FTP_LS",
              "number": "6",
              "description": "LEAF Submarine fiber."
            },
            {
              "name": "FTP_TERAWAVE",
              "number": "7",
              "description": "TeraWave fiber."
            },
            {
              "name": "FTP_TERALIGHT",
              "number": "8",
              "description": "TeraLight fiber."
            }
          ]
        },
        {
          "name": "Type",
          "longName": "InitiateError.Type",
          "fullName": "gnoi.optical.InitiateError.Type",
          "description": "",
          "values": [
            {
              "name": "UNSPECIFIED",
              "number": "0",
              "description": "An unspecified error. Must use the detail value to describe the issue."
            },
            {
              "name": "ALREADY_IN_PROGRESS",
              "number": "1",
              "description": "An existing OTDR trace is already in progress."
            },
            {
              "name": "HARDWARE_FAILURE",
              "number": "2",
              "description": "The OTDR hardware has failed and cannot complete an OTDR trace."
            }
          ]
        },
        {
          "name": "State",
          "longName": "InitiateProgress.State",
          "fullName": "gnoi.optical.InitiateProgress.State",
          "description": "The State enum defines possible states that the OTDR trace may be in\nwhile running the operation.",
          "values": [
            {
              "name": "UNKNOWN",
              "number": "0",
              "description": ""
            },
            {
              "name": "RUNNING",
              "number": "1",
              "description": "The OTDR is currently performing an OTDR trace."
            },
            {
              "name": "PENDING",
              "number": "2",
              "description": "The OTDR is pending underlying resources being available."
            },
            {
              "name": "COMPLETE",
              "number": "3",
              "description": "The OTDR trace was completed."
            }
          ]
        },
        {
          "name": "ResultsMethod",
          "longName": "InitiateRequest.ResultsMethod",
          "fullName": "gnoi.optical.InitiateRequest.ResultsMethod",
          "description": "",
          "values": [
            {
              "name": "RESULTS_UNKNOWN",
              "number": "0",
              "description": ""
            },
            {
              "name": "RESULTS_TO_LOCAL_DISK",
              "number": "1",
              "description": "Results saved to a file on the device."
            },
            {
              "name": "RESULTS_IN_RESPONSE",
              "number": "2",
              "description": "Results sent back in the response."
            }
          ]
        }
      ],
      "extensions": [],
      "messages": [
        {
          "name": "Event",
          "longName": "Event",
          "fullName": "gnoi.optical.Event",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "distance_m",
              "description": "Distance at which the event occurred in meters.",
              "label": "",
              "type": "float",
              "longType": "float",
              "fullType": "float",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "loss_db",
              "description": "The fiber loss that occurred at the event in dB.",
              "label": "",
              "type": "float",
              "longType": "float",
              "fullType": "float",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "reflection_db",
              "description": "The reflection that occurred at the event in dB.",
              "label": "",
              "type": "float",
              "longType": "float",
              "fullType": "float",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "InitiateError",
          "longName": "InitiateError",
          "fullName": "gnoi.optical.InitiateError",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "type",
              "description": "",
              "label": "",
              "type": "Type",
              "longType": "InitiateError.Type",
              "fullType": "gnoi.optical.InitiateError.Type",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "detail",
              "description": "",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "InitiateProgress",
          "longName": "InitiateProgress",
          "fullName": "gnoi.optical.InitiateProgress",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "state",
              "description": "The state of the OTDR trace requested. Note that this does not include\nerror states as these should be returned as a gRPC error.",
              "label": "",
              "type": "State",
              "longType": "InitiateProgress.State",
              "fullType": "gnoi.optical.InitiateProgress.State",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "InitiateRequest",
          "longName": "InitiateRequest",
          "fullName": "gnoi.optical.InitiateRequest",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "component",
              "description": "Absolute path to the /components/component list member in the OpenConfig\nmodel corresponding to the port to perform the OTDR trace from.\n(e.g., /components/component[name=otdr-1-1])",
              "label": "",
              "type": "Path",
              "longType": "gnoi.types.Path",
              "fullType": "gnoi.types.Path",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "results_method",
              "description": "Describes how the results of the OTDR trace should be made available. More\nthan one option may be specified if desired.",
              "label": "repeated",
              "type": "ResultsMethod",
              "longType": "InitiateRequest.ResultsMethod",
              "fullType": "gnoi.optical.InitiateRequest.ResultsMethod",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "configuration",
              "description": "Describes the configuration used to perform an OTDR trace.",
              "label": "",
              "type": "OTDRConfiguration",
              "longType": "OTDRConfiguration",
              "fullType": "gnoi.optical.OTDRConfiguration",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "label",
              "description": "If specified, the device will label the OTDR trace so it can be recalled\nlater. For example, the initial OTDR trace measured during span\ncommissioning might be labeled \"baseline\".",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "InitiateResponse",
          "longName": "InitiateResponse",
          "fullName": "gnoi.optical.InitiateResponse",
          "description": "IntitiateResponse describes the possible response messages that will be\nstreamed after the RPC is initiated. While the OTDR is running, \"progress\"\nmessages should be sent at a regular interval. When the OTDR trace is\ncompleted, a final \"results\" or \"error\" message should be streamed before\nthe RPC is terminated.",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": true,
          "extensions": [],
          "fields": [
            {
              "name": "progress",
              "description": "",
              "label": "",
              "type": "InitiateProgress",
              "longType": "InitiateProgress",
              "fullType": "gnoi.optical.InitiateProgress",
              "ismap": false,
              "isoneof": true,
              "oneofdecl": "response",
              "defaultValue": ""
            },
            {
              "name": "results",
              "description": "",
              "label": "",
              "type": "InitiateResults",
              "longType": "InitiateResults",
              "fullType": "gnoi.optical.InitiateResults",
              "ismap": false,
              "isoneof": true,
              "oneofdecl": "response",
              "defaultValue": ""
            },
            {
              "name": "error",
              "description": "",
              "label": "",
              "type": "InitiateError",
              "longType": "InitiateError",
              "fullType": "gnoi.optical.InitiateError",
              "ismap": false,
              "isoneof": true,
              "oneofdecl": "response",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "InitiateResults",
          "longName": "InitiateResults",
          "fullName": "gnoi.optical.InitiateResults",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "local_path",
              "description": "The local path in which the OTDR file is saved on the device.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "otdr_trace",
              "description": "The OTDR trace details in a structured format.",
              "label": "",
              "type": "OTDRTrace",
              "longType": "OTDRTrace",
              "fullType": "gnoi.optical.OTDRTrace",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "OTDRConfiguration",
          "longName": "OTDRConfiguration",
          "fullName": "gnoi.optical.OTDRConfiguration",
          "description": "OTDR configuration options which can be set on the device. It is not required\nthat every field be set as some fields may not apply for a given\nimplementation.",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "acquisition_time_s",
              "description": "The time in seconds in which the OTDR trace will run continuously to\ncollect data.",
              "label": "",
              "type": "uint32",
              "longType": "uint32",
              "fullType": "uint32",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "pulse_width_ns",
              "description": "The pulse width in nanoseconds which defines how long pulses sent by the\nOTDR will be during the test.",
              "label": "",
              "type": "float",
              "longType": "float",
              "fullType": "float",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "wavelength_mhz",
              "description": "The wavelength in MHz that will be sent by the OTDR. This may be left blank\nif the OTDR only supports one wavelength.",
              "label": "",
              "type": "uint64",
              "longType": "uint64",
              "fullType": "uint64",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "range_m",
              "description": "The maximum fiber distance range in meters that the OTDR trace will\nsupport.",
              "label": "",
              "type": "float",
              "longType": "float",
              "fullType": "float",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "fiber_type",
              "description": "The type of fiber that is being measured.",
              "label": "",
              "type": "FiberTypeProfile",
              "longType": "FiberTypeProfile",
              "fullType": "gnoi.optical.FiberTypeProfile",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "sampling_resolution_m",
              "description": "The sampling resolution in meters.",
              "label": "",
              "type": "float",
              "longType": "float",
              "fullType": "float",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "OTDRTrace",
          "longName": "OTDRTrace",
          "fullName": "gnoi.optical.OTDRTrace",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "total_loss_db",
              "description": "Total measured loss of the fiber.",
              "label": "",
              "type": "float",
              "longType": "float",
              "fullType": "float",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "total_length_m",
              "description": "Total measured length of the fiber in meters.",
              "label": "",
              "type": "float",
              "longType": "float",
              "fullType": "float",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "optical_return_loss_db",
              "description": "Optical return loss of the fiber in dB.",
              "label": "",
              "type": "float",
              "longType": "float",
              "fullType": "float",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "average_loss_db_km",
              "description": "Average fiber loss (dB/km)",
              "label": "",
              "type": "float",
              "longType": "float",
              "fullType": "float",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "discovered_fiber_type",
              "description": "Discovered fiber type, if the OTDR can infer this information.",
              "label": "",
              "type": "FiberTypeProfile",
              "longType": "FiberTypeProfile",
              "fullType": "gnoi.optical.FiberTypeProfile",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "events",
              "description": "",
              "label": "repeated",
              "type": "Event",
              "longType": "Event",
              "fullType": "gnoi.optical.Event",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        }
      ],
      "services": [
        {
          "name": "OTDR",
          "longName": "OTDR",
          "fullName": "gnoi.optical.OTDR",
          "description": "",
          "methods": [
            {
              "name": "Initiate",
              "description": "Initiate triggers an optical time domain reflectometer (OTDR) trace to\nbe run on a specified port. The results of the trace may be sent back in\nthe response or saved on the device to be retrieved later. If the\ninformation is saved on the device a path to the file must be returned\nwhich can later be used by File.Get or File.TransferToRemote. The RPC\nshould initiate the OTDR trace and wait until the OTDR trace has completed\nand the device has processed the results before returning. If the RPC is\ncancelled while in operation, the running OTDR trace should stop.",
              "requestType": "InitiateRequest",
              "requestLongType": "InitiateRequest",
              "requestFullType": "gnoi.optical.InitiateRequest",
              "requestStreaming": false,
              "responseType": "InitiateResponse",
              "responseLongType": "InitiateResponse",
              "responseFullType": "gnoi.optical.InitiateResponse",
              "responseStreaming": true
            }
          ]
        }
      ]
    }
  ],
  "scalarValueTypes": [
    {
      "protoType": "double",
      "notes": "",
      "cppType": "double",
      "csType": "double",
      "goType": "float64",
      "javaType": "double",
      "phpType": "float",
      "pythonType": "float",
      "rubyType": "Float"
    },
    {
      "protoType": "float",
      "notes": "",
      "cppType": "float",
      "csType": "float",
      "goType": "float32",
      "javaType": "float",
      "phpType": "float",
      "pythonType": "float",
      "rubyType": "Float"
    },
    {
      "protoType": "int32",
      "notes": "Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.",
      "cppType": "int32",
      "csType": "int",
      "goType": "int32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "int64",
      "notes": "Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.",
      "cppType": "int64",
      "csType": "long",
      "goType": "int64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "uint32",
      "notes": "Uses variable-length encoding.",
      "cppType": "uint32",
      "csType": "uint",
      "goType": "uint32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int/long",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "uint64",
      "notes": "Uses variable-length encoding.",
      "cppType": "uint64",
      "csType": "ulong",
      "goType": "uint64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "sint32",
      "notes": "Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.",
      "cppType": "int32",
      "csType": "int",
      "goType": "int32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "sint64",
      "notes": "Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.",
      "cppType": "int64",
      "csType": "long",
      "goType": "int64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "fixed32",
      "notes": "Always four bytes. More efficient than uint32 if values are often greater than 2^28.",
      "cppType": "uint32",
      "csType": "uint",
      "goType": "uint32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "fixed64",
      "notes": "Always eight bytes. More efficient than uint64 if values are often greater than 2^56.",
      "cppType": "uint64",
      "csType": "ulong",
      "goType": "uint64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "sfixed32",
      "notes": "Always four bytes.",
      "cppType": "int32",
      "csType": "int",
      "goType": "int32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "sfixed64",
      "notes": "Always eight bytes.",
      "cppType": "int64",
      "csType": "long",
      "goType": "int64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "bool",
      "notes": "",
      "cppType": "bool",
      "csType": "bool",
      "goType": "bool",
      "javaType": "boolean",
      "phpType": "boolean",
      "pythonType": "boolean",
      "rubyType": "TrueClass/FalseClass"
    },
    {
      "protoType": "string",
      "notes": "A string must always contain UTF-8 encoded or 7-bit ASCII text.",
      "cppType": "string",
      "csType": "string",
      "goType": "string",
      "javaType": "String",
      "phpType": "string",
      "pythonType": "str/unicode",
      "rubyType": "String (UTF-8)"
    },
    {
      "protoType": "bytes",
      "notes": "May contain any arbitrary sequence of bytes.",
      "cppType": "string",
      "csType": "ByteString",
      "goType": "[]byte",
      "javaType": "ByteString",
      "phpType": "string",
      "pythonType": "str",
      "rubyType": "String (ASCII-8BIT)"
    }
  ]
}