{
  "files": [
    {
      "name": "github.com/openconfig/gnoi/healthz/healthz.proto",
      "description": "",
      "package": "gnoi.healthz",
      "hasEnums": true,
      "hasExtensions": false,
      "hasMessages": true,
      "hasServices": true,
      "enums": [
        {
          "name": "Status",
          "longName": "Status",
          "fullName": "gnoi.healthz.Status",
          "description": "",
          "values": [
            {
              "name": "STATUS_UNSPECIFIED",
              "number": "0",
              "description": "The path doesn't support healthz"
            },
            {
              "name": "STATUS_HEALTHY",
              "number": "1",
              "description": "The path is healthy"
            },
            {
              "name": "STATUS_UNHEALTHY",
              "number": "2",
              "description": "The path is unhealthy"
            }
          ]
        }
      ],
      "extensions": [],
      "messages": [
        {
          "name": "AcknowledgeRequest",
          "longName": "AcknowledgeRequest",
          "fullName": "gnoi.healthz.AcknowledgeRequest",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "path",
              "description": "",
              "label": "",
              "type": "Path",
              "longType": "gnoi.types.Path",
              "fullType": "gnoi.types.Path",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "id",
              "description": "Healthz event id.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "AcknowledgeResponse",
          "longName": "AcknowledgeResponse",
          "fullName": "gnoi.healthz.AcknowledgeResponse",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "status",
              "description": "",
              "label": "",
              "type": "ComponentStatus",
              "longType": "ComponentStatus",
              "fullType": "gnoi.healthz.ComponentStatus",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ArtifactHeader",
          "longName": "ArtifactHeader",
          "fullName": "gnoi.healthz.ArtifactHeader",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": true,
          "extensions": [],
          "fields": [
            {
              "name": "id",
              "description": "ID of the artifact.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "file",
              "description": "",
              "label": "",
              "type": "FileArtifactType",
              "longType": "FileArtifactType",
              "fullType": "gnoi.healthz.FileArtifactType",
              "ismap": false,
              "isoneof": true,
              "oneofdecl": "artifact_type",
              "defaultValue": ""
            },
            {
              "name": "proto",
              "description": "",
              "label": "",
              "type": "ProtoArtifactType",
              "longType": "ProtoArtifactType",
              "fullType": "gnoi.healthz.ProtoArtifactType",
              "ismap": false,
              "isoneof": true,
              "oneofdecl": "artifact_type",
              "defaultValue": ""
            },
            {
              "name": "custom",
              "description": "",
              "label": "",
              "type": "Any",
              "longType": "google.protobuf.Any",
              "fullType": "google.protobuf.Any",
              "ismap": false,
              "isoneof": true,
              "oneofdecl": "artifact_type",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ArtifactRequest",
          "longName": "ArtifactRequest",
          "fullName": "gnoi.healthz.ArtifactRequest",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "id",
              "description": "Artifact ID to be streamed.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ArtifactResponse",
          "longName": "ArtifactResponse",
          "fullName": "gnoi.healthz.ArtifactResponse",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": true,
          "extensions": [],
          "fields": [
            {
              "name": "header",
              "description": "Header is the first message in the stream. It contains\nthe id of the artifact and metadata for the artifact\nbased on the type of the artifact.\nOC defines FileArtifactType and ProtoArtifactType.",
              "label": "",
              "type": "ArtifactHeader",
              "longType": "ArtifactHeader",
              "fullType": "gnoi.healthz.ArtifactHeader",
              "ismap": false,
              "isoneof": true,
              "oneofdecl": "contents",
              "defaultValue": ""
            },
            {
              "name": "trailer",
              "description": "",
              "label": "",
              "type": "ArtifactTrailer",
              "longType": "ArtifactTrailer",
              "fullType": "gnoi.healthz.ArtifactTrailer",
              "ismap": false,
              "isoneof": true,
              "oneofdecl": "contents",
              "defaultValue": ""
            },
            {
              "name": "bytes",
              "description": "",
              "label": "",
              "type": "bytes",
              "longType": "bytes",
              "fullType": "bytes",
              "ismap": false,
              "isoneof": true,
              "oneofdecl": "contents",
              "defaultValue": ""
            },
            {
              "name": "proto",
              "description": "",
              "label": "",
              "type": "Any",
              "longType": "google.protobuf.Any",
              "fullType": "google.protobuf.Any",
              "ismap": false,
              "isoneof": true,
              "oneofdecl": "contents",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ArtifactTrailer",
          "longName": "ArtifactTrailer",
          "fullName": "gnoi.healthz.ArtifactTrailer",
          "description": "ArtifactTrailer is the last message in the artifact stream.",
          "hasExtensions": false,
          "hasFields": false,
          "hasOneofs": false,
          "extensions": [],
          "fields": []
        },
        {
          "name": "CheckRequest",
          "longName": "CheckRequest",
          "fullName": "gnoi.healthz.CheckRequest",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "path",
              "description": "",
              "label": "",
              "type": "Path",
              "longType": "gnoi.types.Path",
              "fullType": "gnoi.types.Path",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "event_id",
              "description": "When event_id is populated the check request refers to an\nevent that has already been reported by the system. The\ndevice receiving the CheckRequest should populate artifacts\nthat are relevant to the event that were not automatically\ncollected. Previous artifacts MUST NOT be overwritten.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "CheckResponse",
          "longName": "CheckResponse",
          "fullName": "gnoi.healthz.CheckResponse",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "status",
              "description": "",
              "label": "",
              "type": "ComponentStatus",
              "longType": "ComponentStatus",
              "fullType": "gnoi.healthz.ComponentStatus",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ComponentStatus",
          "longName": "ComponentStatus",
          "fullName": "gnoi.healthz.ComponentStatus",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "path",
              "description": "path of subcomponent.",
              "label": "",
              "type": "Path",
              "longType": "gnoi.types.Path",
              "fullType": "gnoi.types.Path",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "subcomponents",
              "description": "Subcomponents that are aggregated by this status.",
              "label": "repeated",
              "type": "ComponentStatus",
              "longType": "ComponentStatus",
              "fullType": "gnoi.healthz.ComponentStatus",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "status",
              "description": "Status of this component.",
              "label": "",
              "type": "Status",
              "longType": "Status",
              "fullType": "gnoi.healthz.Status",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "healthz",
              "description": "Opaque data for how the healthcheck is implemented.  This can be any proto\ndefined by the vendor.  This could be the equivalent to outputs like\n\"show tech\" or core files or any other diagnostic data.",
              "label": "",
              "type": "Any",
              "longType": "google.protobuf.Any",
              "fullType": "google.protobuf.Any",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": "",
              "options": {
                "deprecated": true
              }
            },
            {
              "name": "artifacts",
              "description": "Artifacts provides links to all artifacts contained in this event.\nThe individual artifacts can be retrieved via the Artifact() RPC.",
              "label": "repeated",
              "type": "ArtifactHeader",
              "longType": "ArtifactHeader",
              "fullType": "gnoi.healthz.ArtifactHeader",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "id",
              "description": "ID is the unique key for this event in the system.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "acknowledged",
              "description": "Acknowledged is set when at least one caller has processed the event.",
              "label": "",
              "type": "bool",
              "longType": "bool",
              "fullType": "bool",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "created",
              "description": "Created is the timestamp when this event was created.",
              "label": "",
              "type": "Timestamp",
              "longType": "google.protobuf.Timestamp",
              "fullType": "google.protobuf.Timestamp",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "expires",
              "description": "Expires is the timestamp when the system will clean up the\nartifact. If unset, the artifact is not scheduled for garbage\ncollection.",
              "label": "",
              "type": "Timestamp",
              "longType": "google.protobuf.Timestamp",
              "fullType": "google.protobuf.Timestamp",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "FileArtifactType",
          "longName": "FileArtifactType",
          "fullName": "gnoi.healthz.FileArtifactType",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "name",
              "description": "Local file name of the artifact.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "path",
              "description": "Path to file on the local file system. (optional)",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "mimetype",
              "description": "Mimetype of the file.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "size",
              "description": "Size of the file.",
              "label": "",
              "type": "int64",
              "longType": "int64",
              "fullType": "int64",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "hash",
              "description": "Hash of the file.",
              "label": "",
              "type": "HashType",
              "longType": "gnoi.types.HashType",
              "fullType": "gnoi.types.HashType",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "GetRequest",
          "longName": "GetRequest",
          "fullName": "gnoi.healthz.GetRequest",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "path",
              "description": "Path defines the component to try to fetch healthz state for. Get\nretrieves the latest healthz results for a specific component\nthat have been collected as a result of a call to Check, or by\nthe target itself.",
              "label": "",
              "type": "Path",
              "longType": "gnoi.types.Path",
              "fullType": "gnoi.types.Path",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "GetResponse",
          "longName": "GetResponse",
          "fullName": "gnoi.healthz.GetResponse",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "component",
              "description": "",
              "label": "",
              "type": "ComponentStatus",
              "longType": "ComponentStatus",
              "fullType": "gnoi.healthz.ComponentStatus",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ListRequest",
          "longName": "ListRequest",
          "fullName": "gnoi.healthz.ListRequest",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "path",
              "description": "",
              "label": "",
              "type": "Path",
              "longType": "gnoi.types.Path",
              "fullType": "gnoi.types.Path",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "include_acknowledged",
              "description": "By default only the unacknowledged events for the component will be\nreturned.",
              "label": "",
              "type": "bool",
              "longType": "bool",
              "fullType": "bool",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ListResponse",
          "longName": "ListResponse",
          "fullName": "gnoi.healthz.ListResponse",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "statuses",
              "description": "",
              "label": "repeated",
              "type": "ComponentStatus",
              "longType": "ComponentStatus",
              "fullType": "gnoi.healthz.ComponentStatus",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ProtoArtifactType",
          "longName": "ProtoArtifactType",
          "fullName": "gnoi.healthz.ProtoArtifactType",
          "description": "Generic proto message artifact stream.\nThis proto tells the caller that the artifact stream\nwill be a stream of proto encoded messages that make up\nthe artifact. Each message must be deserialized by the caller\nand there are no other assumptions about the number of\nmessages or length of the stream or how those messages are to\nbe reassembled.",
          "hasExtensions": false,
          "hasFields": false,
          "hasOneofs": false,
          "extensions": [],
          "fields": []
        }
      ],
      "services": [
        {
          "name": "Healthz",
          "longName": "Healthz",
          "fullName": "gnoi.healthz.Healthz",
          "description": "The Healthz service provides access to the status of a path on the\nsystem. Addtitionally it allows the implementor to provide path specific\ndiagnositic data into the status return.\n\nHealthz is expected to work in conjunction with the component OC model.",
          "methods": [
            {
              "name": "Get",
              "description": "Get will get the latest health status for a gNMI path.  If no status is\navailable for the requested path an error will be returned.",
              "requestType": "GetRequest",
              "requestLongType": "GetRequest",
              "requestFullType": "gnoi.healthz.GetRequest",
              "requestStreaming": false,
              "responseType": "GetResponse",
              "responseLongType": "GetResponse",
              "responseFullType": "gnoi.healthz.GetResponse",
              "responseStreaming": false
            },
            {
              "name": "List",
              "description": "List returns all events for the provided component path.",
              "requestType": "ListRequest",
              "requestLongType": "ListRequest",
              "requestFullType": "gnoi.healthz.ListRequest",
              "requestStreaming": false,
              "responseType": "ListResponse",
              "responseLongType": "ListResponse",
              "responseFullType": "gnoi.healthz.ListResponse",
              "responseStreaming": false
            },
            {
              "name": "Acknowledge",
              "description": "Acknowledge will set the acknowledged field for the event.\nThis is an idempotent operation.",
              "requestType": "AcknowledgeRequest",
              "requestLongType": "AcknowledgeRequest",
              "requestFullType": "gnoi.healthz.AcknowledgeRequest",
              "requestStreaming": false,
              "responseType": "AcknowledgeResponse",
              "responseLongType": "AcknowledgeResponse",
              "responseFullType": "gnoi.healthz.AcknowledgeResponse",
              "responseStreaming": false
            },
            {
              "name": "Artifact",
              "description": "Artifact will stream the artifact contents for the provided artifact id.",
              "requestType": "ArtifactRequest",
              "requestLongType": "ArtifactRequest",
              "requestFullType": "gnoi.healthz.ArtifactRequest",
              "requestStreaming": false,
              "responseType": "ArtifactResponse",
              "responseLongType": "ArtifactResponse",
              "responseFullType": "gnoi.healthz.ArtifactResponse",
              "responseStreaming": true
            },
            {
              "name": "Check",
              "description": "Check will invoke the healthz on the provided component path. This RPC\ncan be expensive depending on the vendor implementation.",
              "requestType": "CheckRequest",
              "requestLongType": "CheckRequest",
              "requestFullType": "gnoi.healthz.CheckRequest",
              "requestStreaming": false,
              "responseType": "CheckResponse",
              "responseLongType": "CheckResponse",
              "responseFullType": "gnoi.healthz.CheckResponse",
              "responseStreaming": false
            }
          ]
        }
      ]
    },
    {
      "name": "google/protobuf/any.proto",
      "description": "",
      "package": "google.protobuf",
      "hasEnums": false,
      "hasExtensions": false,
      "hasMessages": true,
      "hasServices": false,
      "enums": [],
      "extensions": [],
      "messages": [
        {
          "name": "Any",
          "longName": "Any",
          "fullName": "google.protobuf.Any",
          "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "type_url",
              "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "value",
              "description": "Must be a valid serialized protocol buffer of the above specified type.",
              "label": "",
              "type": "bytes",
              "longType": "bytes",
              "fullType": "bytes",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        }
      ],
      "services": []
    },
    {
      "name": "google/protobuf/timestamp.proto",
      "description": "",
      "package": "google.protobuf",
      "hasEnums": false,
      "hasExtensions": false,
      "hasMessages": true,
      "hasServices": false,
      "enums": [],
      "extensions": [],
      "messages": [
        {
          "name": "Timestamp",
          "longName": "Timestamp",
          "fullName": "google.protobuf.Timestamp",
          "description": "A Timestamp represents a point in time independent of any time zone or local\ncalendar, encoded as a count of seconds and fractions of seconds at\nnanosecond resolution. The count is relative to an epoch at UTC midnight on\nJanuary 1, 1970, in the proleptic Gregorian calendar which extends the\nGregorian calendar backwards to year one.\n\nAll minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\nsecond table is needed for interpretation, using a [24-hour linear\nsmear](https://developers.google.com/time/smear).\n\nThe range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\nrestricting to that range, we ensure that we can convert to and from [RFC\n3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\n\n# Examples\n\nExample 1: Compute Timestamp from POSIX `time()`.\n\n    Timestamp timestamp;\n    timestamp.set_seconds(time(NULL));\n    timestamp.set_nanos(0);\n\nExample 2: Compute Timestamp from POSIX `gettimeofday()`.\n\n    struct timeval tv;\n    gettimeofday(\u0026tv, NULL);\n\n    Timestamp timestamp;\n    timestamp.set_seconds(tv.tv_sec);\n    timestamp.set_nanos(tv.tv_usec * 1000);\n\nExample 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n\n    FILETIME ft;\n    GetSystemTimeAsFileTime(\u0026ft);\n    UINT64 ticks = (((UINT64)ft.dwHighDateTime) \u003c\u003c 32) | ft.dwLowDateTime;\n\n    // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n    // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\n    Timestamp timestamp;\n    timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\n    timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n\nExample 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n\n    long millis = System.currentTimeMillis();\n\n    Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n        .setNanos((int) ((millis % 1000) * 1000000)).build();\n\nExample 5: Compute Timestamp from Java `Instant.now()`.\n\n    Instant now = Instant.now();\n\n    Timestamp timestamp =\n        Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n            .setNanos(now.getNano()).build();\n\nExample 6: Compute Timestamp from current time in Python.\n\n    timestamp = Timestamp()\n    timestamp.GetCurrentTime()\n\n# JSON Mapping\n\nIn JSON format, the Timestamp type is encoded as a string in the\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\nformat is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\nwhere {year} is always expressed using four digits while {month}, {day},\n{hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\nseconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\nare optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\nis required. A proto3 JSON serializer should always use UTC (as indicated by\n\"Z\") when printing the Timestamp type and a proto3 JSON parser should be\nable to accept both UTC and other timezones (as indicated by an offset).\n\nFor example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n01:30 UTC on January 15, 2017.\n\nIn JavaScript, one can convert a Date object to this format using the\nstandard\n[toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\nmethod. In Python, a standard `datetime.datetime` object can be converted\nto this format using\n[`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\nthe time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\nthe Joda Time's [`ISODateTimeFormat.dateTime()`](\nhttp://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime%2D%2D\n) to obtain a formatter capable of generating timestamps in this format.",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "seconds",
              "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
              "label": "",
              "type": "int64",
              "longType": "int64",
              "fullType": "int64",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "nanos",
              "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
              "label": "",
              "type": "int32",
              "longType": "int32",
              "fullType": "int32",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        }
      ],
      "services": []
    },
    {
      "name": "types/types.proto",
      "description": "",
      "package": "gnoi.types",
      "hasEnums": true,
      "hasExtensions": true,
      "hasMessages": true,
      "hasServices": false,
      "enums": [
        {
          "name": "HashMethod",
          "longName": "HashType.HashMethod",
          "fullName": "gnoi.types.HashType.HashMethod",
          "description": "",
          "values": [
            {
              "name": "UNSPECIFIED",
              "number": "0",
              "description": ""
            },
            {
              "name": "SHA256",
              "number": "1",
              "description": ""
            },
            {
              "name": "SHA512",
              "number": "2",
              "description": ""
            },
            {
              "name": "MD5",
              "number": "3",
              "description": ""
            }
          ]
        },
        {
          "name": "L3Protocol",
          "longName": "L3Protocol",
          "fullName": "gnoi.types.L3Protocol",
          "description": "Generic Layer 3 Protocol enumeration.",
          "values": [
            {
              "name": "UNSPECIFIED",
              "number": "0",
              "description": ""
            },
            {
              "name": "IPV4",
              "number": "1",
              "description": ""
            },
            {
              "name": "IPV6",
              "number": "2",
              "description": ""
            }
          ]
        }
      ],
      "extensions": [
        {
          "name": "gnoi_version",
          "longName": ".google.protobuf.FileOptions.gnoi_version",
          "fullName": ".google.protobuf.FileOptions.gnoi_version",
          "description": "The gNOI service semantic version.",
          "label": "",
          "type": "string",
          "longType": "string",
          "fullType": "string",
          "number": 1002,
          "defaultValue": "",
          "containingType": "FileOptions",
          "containingLongType": ".google.protobuf.FileOptions",
          "containingFullType": "google.protobuf.FileOptions"
        }
      ],
      "messages": [
        {
          "name": "Credentials",
          "longName": "Credentials",
          "fullName": "gnoi.types.Credentials",
          "description": "Credentials defines credentials needed to perform authentication on a device.",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": true,
          "extensions": [],
          "fields": [
            {
              "name": "username",
              "description": "",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "cleartext",
              "description": "",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": true,
              "oneofdecl": "password",
              "defaultValue": ""
            },
            {
              "name": "hashed",
              "description": "",
              "label": "",
              "type": "HashType",
              "longType": "HashType",
              "fullType": "gnoi.types.HashType",
              "ismap": false,
              "isoneof": true,
              "oneofdecl": "password",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "HashType",
          "longName": "HashType",
          "fullName": "gnoi.types.HashType",
          "description": "HashType defines the valid hash methods for data verification.  UNSPECIFIED\nshould be treated an error.",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "method",
              "description": "",
              "label": "",
              "type": "HashMethod",
              "longType": "HashType.HashMethod",
              "fullType": "gnoi.types.HashType.HashMethod",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "hash",
              "description": "",
              "label": "",
              "type": "bytes",
              "longType": "bytes",
              "fullType": "bytes",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Path",
          "longName": "Path",
          "fullName": "gnoi.types.Path",
          "description": "Path encodes a data tree path as a series of repeated strings, with\neach element of the path representing a data tree node name and the\nassociated attributes.\nReference: gNMI Specification Section 2.2.2.",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "origin",
              "description": "Label to disambiguate path.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "elem",
              "description": "Elements of the path.",
              "label": "repeated",
              "type": "PathElem",
              "longType": "PathElem",
              "fullType": "gnoi.types.PathElem",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "PathElem",
          "longName": "PathElem",
          "fullName": "gnoi.types.PathElem",
          "description": "PathElem encodes an element of a gNMI path, along with any attributes (keys)\nthat may be associated with it.\nReference: gNMI Specification Section 2.2.2.",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "name",
              "description": "The name of the element in the path.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "key",
              "description": "Map of key (attribute) name to value.",
              "label": "repeated",
              "type": "KeyEntry",
              "longType": "PathElem.KeyEntry",
              "fullType": "gnoi.types.PathElem.KeyEntry",
              "ismap": true,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "KeyEntry",
          "longName": "PathElem.KeyEntry",
          "fullName": "gnoi.types.PathElem.KeyEntry",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "key",
              "description": "",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "value",
              "description": "",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        }
      ],
      "services": []
    }
  ],
  "scalarValueTypes": [
    {
      "protoType": "double",
      "notes": "",
      "cppType": "double",
      "csType": "double",
      "goType": "float64",
      "javaType": "double",
      "phpType": "float",
      "pythonType": "float",
      "rubyType": "Float"
    },
    {
      "protoType": "float",
      "notes": "",
      "cppType": "float",
      "csType": "float",
      "goType": "float32",
      "javaType": "float",
      "phpType": "float",
      "pythonType": "float",
      "rubyType": "Float"
    },
    {
      "protoType": "int32",
      "notes": "Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.",
      "cppType": "int32",
      "csType": "int",
      "goType": "int32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "int64",
      "notes": "Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.",
      "cppType": "int64",
      "csType": "long",
      "goType": "int64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "uint32",
      "notes": "Uses variable-length encoding.",
      "cppType": "uint32",
      "csType": "uint",
      "goType": "uint32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int/long",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "uint64",
      "notes": "Uses variable-length encoding.",
      "cppType": "uint64",
      "csType": "ulong",
      "goType": "uint64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "sint32",
      "notes": "Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.",
      "cppType": "int32",
      "csType": "int",
      "goType": "int32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "sint64",
      "notes": "Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.",
      "cppType": "int64",
      "csType": "long",
      "goType": "int64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "fixed32",
      "notes": "Always four bytes. More efficient than uint32 if values are often greater than 2^28.",
      "cppType": "uint32",
      "csType": "uint",
      "goType": "uint32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "fixed64",
      "notes": "Always eight bytes. More efficient than uint64 if values are often greater than 2^56.",
      "cppType": "uint64",
      "csType": "ulong",
      "goType": "uint64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "sfixed32",
      "notes": "Always four bytes.",
      "cppType": "int32",
      "csType": "int",
      "goType": "int32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "sfixed64",
      "notes": "Always eight bytes.",
      "cppType": "int64",
      "csType": "long",
      "goType": "int64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "bool",
      "notes": "",
      "cppType": "bool",
      "csType": "bool",
      "goType": "bool",
      "javaType": "boolean",
      "phpType": "boolean",
      "pythonType": "boolean",
      "rubyType": "TrueClass/FalseClass"
    },
    {
      "protoType": "string",
      "notes": "A string must always contain UTF-8 encoded or 7-bit ASCII text.",
      "cppType": "string",
      "csType": "string",
      "goType": "string",
      "javaType": "String",
      "phpType": "string",
      "pythonType": "str/unicode",
      "rubyType": "String (UTF-8)"
    },
    {
      "protoType": "bytes",
      "notes": "May contain any arbitrary sequence of bytes.",
      "cppType": "string",
      "csType": "ByteString",
      "goType": "[]byte",
      "javaType": "ByteString",
      "phpType": "string",
      "pythonType": "str",
      "rubyType": "String (ASCII-8BIT)"
    }
  ]
}