{
  "files": [
    {
      "name": "diag.proto",
      "description": "This file defines the gNOI APIs used to perform diagnostic operations on a\nnetwork device.",
      "package": "gnoi.diag",
      "hasEnums": true,
      "hasExtensions": false,
      "hasMessages": true,
      "hasServices": true,
      "enums": [
        {
          "name": "BertStatus",
          "longName": "BertStatus",
          "fullName": "gnoi.diag.BertStatus",
          "description": "Status returned for each per-port BERT request.",
          "values": [
            {
              "name": "BERT_STATUS_UNKNOWN",
              "number": "0",
              "description": "default invalid choice."
            },
            {
              "name": "BERT_STATUS_OK",
              "number": "1",
              "description": "BERT requests (Start, Stop, GetStatus) were processed successfully."
            },
            {
              "name": "BERT_STATUS_NON_EXISTENT_PORT",
              "number": "2",
              "description": "The specified port was not found."
            },
            {
              "name": "BERT_STATUS_HARDWARE_ACCESS_ERROR",
              "number": "3",
              "description": "HW error was encountered while performing BERT operation."
            },
            {
              "name": "BERT_STATUS_UNSUPPORTED_PRBS_POLYNOMIAL",
              "number": "4",
              "description": "PRBS generating polynomial is not supported by the target."
            },
            {
              "name": "BERT_STATUS_PORT_ALREADY_IN_BERT",
              "number": "5",
              "description": "There is already a BERT running on the specified port. Returned when\n`StartBert` RPC tries to add run BERT on an already in-use port."
            },
            {
              "name": "BERT_STATUS_PORT_NOT_RUNNING_BERT",
              "number": "6",
              "description": "There is no BERT running on the specified port. Returned when `StopBert`\nor `GetBertResult` RPC was called for an idle port."
            },
            {
              "name": "BERT_STATUS_TEST_DURATION_TOO_SHORT",
              "number": "7",
              "description": "The specified test duration is too small."
            },
            {
              "name": "BERT_STATUS_TEST_DURATION_TOO_LONG",
              "number": "8",
              "description": "The specified test duration is larger than maximum allowed."
            },
            {
              "name": "BERT_STATUS_OPERATION_ID_NOT_FOUND",
              "number": "9",
              "description": "The given BERT operation ID is not known. Returned for `StopBert` and\n`GetBertResult` RPCs."
            },
            {
              "name": "BERT_STATUS_OPERATION_ID_IN_USE",
              "number": "10",
              "description": "The given BERT operation ID is already in use. Returned when `StartBert`\nRPC uses an ID which is already memorized for a BERT operation."
            },
            {
              "name": "BERT_STATUS_PEER_LOCK_FAILURE",
              "number": "11",
              "description": "Failure to get the peer lock."
            },
            {
              "name": "BERT_STATUS_PEER_LOCK_LOST",
              "number": "12",
              "description": "Lost the peer lock after locking once."
            },
            {
              "name": "BERT_STATUS_INTERNAL_ERROR",
              "number": "13",
              "description": "Misc internal errors that cannot be categorized by any of the previous\nerror codes."
            }
          ]
        },
        {
          "name": "PrbsPolynomial",
          "longName": "PrbsPolynomial",
          "fullName": "gnoi.diag.PrbsPolynomial",
          "description": "Common sequence generating monic polynomials used for PRBS.",
          "values": [
            {
              "name": "PRBS_POLYNOMIAL_UNKNOWN",
              "number": "0",
              "description": "default invalid choice."
            },
            {
              "name": "PRBS_POLYNOMIAL_PRBS7",
              "number": "1",
              "description": ""
            },
            {
              "name": "PRBS_POLYNOMIAL_PRBS9",
              "number": "2",
              "description": ""
            },
            {
              "name": "PRBS_POLYNOMIAL_PRBS15",
              "number": "3",
              "description": ""
            },
            {
              "name": "PRBS_POLYNOMIAL_PRBS20",
              "number": "4",
              "description": ""
            },
            {
              "name": "PRBS_POLYNOMIAL_PRBS23",
              "number": "5",
              "description": ""
            },
            {
              "name": "PRBS_POLYNOMIAL_PRBS31",
              "number": "6",
              "description": ""
            }
          ]
        }
      ],
      "extensions": [],
      "messages": [
        {
          "name": "GetBERTResultRequest",
          "longName": "GetBERTResultRequest",
          "fullName": "gnoi.diag.GetBERTResultRequest",
          "description": "TODO: If there is no use case to get the BERT results for all the ports\nindependent of the bert_operation_id, we can simplify this message and\nreturn the results for all the ports associated with an operation ID.",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "bert_operation_id",
              "description": "The same BERT operation ID given when BERT operation was started.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "per_port_requests",
              "description": "All the per-port BERTs result of which we want to query. Must be part of\nthe BERT operation specified by the `bert_operation_id` above.",
              "label": "repeated",
              "type": "PerPortRequest",
              "longType": "GetBERTResultRequest.PerPortRequest",
              "fullType": "gnoi.diag.GetBERTResultRequest.PerPortRequest",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "result_from_all_ports",
              "description": "If set to true, the results for all the per-port BERTs will be returned.\n`bert_operation_id` and `per_port_requests` will be ignored will be\nignored in that case.",
              "label": "",
              "type": "bool",
              "longType": "bool",
              "fullType": "bool",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "PerPortRequest",
          "longName": "GetBERTResultRequest.PerPortRequest",
          "fullName": "gnoi.diag.GetBERTResultRequest.PerPortRequest",
          "description": "Per-port BERT get result requests.",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "interface",
              "description": "Path to the interface corresponding to the port.",
              "label": "",
              "type": "Path",
              "longType": "gnoi.types.Path",
              "fullType": "gnoi.types.Path",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "GetBERTResultResponse",
          "longName": "GetBERTResultResponse",
          "fullName": "gnoi.diag.GetBERTResultResponse",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "per_port_responses",
              "description": "Captures the BERT results on a per-port basis.",
              "label": "repeated",
              "type": "PerPortResponse",
              "longType": "GetBERTResultResponse.PerPortResponse",
              "fullType": "gnoi.diag.GetBERTResultResponse.PerPortResponse",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "PerPortResponse",
          "longName": "GetBERTResultResponse.PerPortResponse",
          "fullName": "gnoi.diag.GetBERTResultResponse.PerPortResponse",
          "description": "Per-port BERT results/status.",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "interface",
              "description": "Path to the interface corresponding to the port.",
              "label": "",
              "type": "Path",
              "longType": "gnoi.types.Path",
              "fullType": "gnoi.types.Path",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "status",
              "description": "BERT result get status for this port. Only if the status is\nBERT_STATUS_OK are the rest of the fields meaningful.",
              "label": "",
              "type": "BertStatus",
              "longType": "BertStatus",
              "fullType": "gnoi.diag.BertStatus",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "bert_operation_id",
              "description": "The ID of the BERT operation running on this port. Since the caller\ncan query the BERT results for all the ports, ID can potentially be\ndifferent for different ports.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "prbs_polynomial",
              "description": "The selected PRBS generating polynomial for BERT on this port.",
              "label": "",
              "type": "PrbsPolynomial",
              "longType": "PrbsPolynomial",
              "fullType": "gnoi.diag.PrbsPolynomial",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "last_bert_start_timestamp",
              "description": "The last time BERT started on this port.",
              "label": "",
              "type": "uint64",
              "longType": "uint64",
              "fullType": "uint64",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "last_bert_get_result_timestamp",
              "description": "The last time BERT results were read for this port.",
              "label": "",
              "type": "uint64",
              "longType": "uint64",
              "fullType": "uint64",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "peer_lock_established",
              "description": "Indicate whether BERT peer lock has was established. If false,\n`bert_lock_lost`, `error_count_per_minute`, and `total_errors` will not\nbe meaningful.",
              "label": "",
              "type": "bool",
              "longType": "bool",
              "fullType": "bool",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "peer_lock_lost",
              "description": "Indicate whether BERT peer lock was lost after being established\nonce.",
              "label": "",
              "type": "bool",
              "longType": "bool",
              "fullType": "bool",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "error_count_per_minute",
              "description": "Sequence of bit errors per min since lock was established.",
              "label": "repeated",
              "type": "uint32",
              "longType": "uint32",
              "fullType": "uint32",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "total_errors",
              "description": "Total number of bit errors accumulated since lock was established.",
              "label": "",
              "type": "uint64",
              "longType": "uint64",
              "fullType": "uint64",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "StartBERTRequest",
          "longName": "StartBERTRequest",
          "fullName": "gnoi.diag.StartBERTRequest",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "bert_operation_id",
              "description": "Unique BERT operation ID specified by the client. Multiple BERTs run on\ndifferent ports can have the same BERT operation ID. This ID will be used\nlater to stop the operation and/or get its results.\nTODO: Investigate whether we can use numerical IDs instead.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "per_port_requests",
              "description": "All the per-port BERTs that are considered one BERT operation and have the\nsame BERT operation ID.",
              "label": "repeated",
              "type": "PerPortRequest",
              "longType": "StartBERTRequest.PerPortRequest",
              "fullType": "gnoi.diag.StartBERTRequest.PerPortRequest",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "PerPortRequest",
          "longName": "StartBERTRequest.PerPortRequest",
          "fullName": "gnoi.diag.StartBERTRequest.PerPortRequest",
          "description": "Per port BERT start requests.",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "interface",
              "description": "Path to the interface corresponding to the port.\n\nrequired",
              "label": "",
              "type": "Path",
              "longType": "gnoi.types.Path",
              "fullType": "gnoi.types.Path",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "prbs_polynomial",
              "description": "The selected PRBS generating polynomial for BERT.\n\nrequired",
              "label": "",
              "type": "PrbsPolynomial",
              "longType": "PrbsPolynomial",
              "fullType": "gnoi.diag.PrbsPolynomial",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "test_duration_in_secs",
              "description": "BERT duration in seconds. Must be a positive number.\n\nrequired",
              "label": "",
              "type": "uint32",
              "longType": "uint32",
              "fullType": "uint32",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "StartBERTResponse",
          "longName": "StartBERTResponse",
          "fullName": "gnoi.diag.StartBERTResponse",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "bert_operation_id",
              "description": "The same BERT operation ID given by the request.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "per_port_responses",
              "description": "Captures the results of starting BERT on a per-port basis.",
              "label": "repeated",
              "type": "PerPortResponse",
              "longType": "StartBERTResponse.PerPortResponse",
              "fullType": "gnoi.diag.StartBERTResponse.PerPortResponse",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "PerPortResponse",
          "longName": "StartBERTResponse.PerPortResponse",
          "fullName": "gnoi.diag.StartBERTResponse.PerPortResponse",
          "description": "Per-port BERT start responses.",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "interface",
              "description": "Path to the interface corresponding to the port.",
              "label": "",
              "type": "Path",
              "longType": "gnoi.types.Path",
              "fullType": "gnoi.types.Path",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "status",
              "description": "BERT start status for this port.",
              "label": "",
              "type": "BertStatus",
              "longType": "BertStatus",
              "fullType": "gnoi.diag.BertStatus",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "StopBERTRequest",
          "longName": "StopBERTRequest",
          "fullName": "gnoi.diag.StopBERTRequest",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "bert_operation_id",
              "description": "The same BERT operation ID given when BERT operation was started.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "per_port_requests",
              "description": "All the per-port BERTs that need to be stopped. Must be part of the BERT\noperation specified by the `bert_operation_id` above.",
              "label": "repeated",
              "type": "PerPortRequest",
              "longType": "StopBERTRequest.PerPortRequest",
              "fullType": "gnoi.diag.StopBERTRequest.PerPortRequest",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "PerPortRequest",
          "longName": "StopBERTRequest.PerPortRequest",
          "fullName": "gnoi.diag.StopBERTRequest.PerPortRequest",
          "description": "Per-port BERT stop requests.",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "interface",
              "description": "Path to the interface corresponding to the port.",
              "label": "",
              "type": "Path",
              "longType": "gnoi.types.Path",
              "fullType": "gnoi.types.Path",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "StopBERTResponse",
          "longName": "StopBERTResponse",
          "fullName": "gnoi.diag.StopBERTResponse",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "bert_operation_id",
              "description": "The same BERT operation ID given by the request.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "per_port_responses",
              "description": "Captures the results of stopping BERT on a per-port basis.",
              "label": "repeated",
              "type": "PerPortResponse",
              "longType": "StopBERTResponse.PerPortResponse",
              "fullType": "gnoi.diag.StopBERTResponse.PerPortResponse",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "PerPortResponse",
          "longName": "StopBERTResponse.PerPortResponse",
          "fullName": "gnoi.diag.StopBERTResponse.PerPortResponse",
          "description": "Per-port BERT stop responses.",
          "hasExtensions": false,
          "hasFields": true,
          "hasOneofs": false,
          "extensions": [],
          "fields": [
            {
              "name": "interface",
              "description": "Path to the interface corresponding to the port.",
              "label": "",
              "type": "Path",
              "longType": "gnoi.types.Path",
              "fullType": "gnoi.types.Path",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            },
            {
              "name": "status",
              "description": "BERT stop status for this port.",
              "label": "",
              "type": "BertStatus",
              "longType": "BertStatus",
              "fullType": "gnoi.diag.BertStatus",
              "ismap": false,
              "isoneof": false,
              "oneofdecl": "",
              "defaultValue": ""
            }
          ]
        }
      ],
      "services": [
        {
          "name": "Diag",
          "longName": "Diag",
          "fullName": "gnoi.diag.Diag",
          "description": "The Diag service exports to main set of RPCs:\n1- BERT related RPCs: Used to perform Bit Error Rate Test (BERT)\n   operations on a set of ports.\n2- BURNIN related RPCs: Used to perform a vendor-provided Burnin test on the\n   network device to ensure the device is ready to start serving traffic.\n   Burnin tests are typically run in the field, as part of turnup or repair\n   workflow.\nNote: The RPCs defined here are are stateless operations and them\nfailing/passing should not leave any permanent artifact on the network device\n (unless there is something wrong HW-wise).\nNote: By \"port\" we refer to a channelized frontpanel or backplane port on a\nchassis. In OpenConfig YANG models, there is a one-to-one relationship\nbetween a port as used here and an \"interface\". Therefore, the \"types.Path\"\nfields below for ports correspond to \"/interfaces/interface\" in YANG models.",
          "methods": [
            {
              "name": "StartBERT",
              "description": "Starts BERT operation on a set of ports. Each BERT operation is uniquely\nidentified by an ID, which is given by the caller. The caller can then\nuse this ID (as well as the list of the ports) to stop the BERT operation\nand/or get the BERT results. This RPC is expected to return an error status\nin the following situations:\n- When BERT operation is supported on none of the ports specified by\n  the request.\n- When BERT is already in progress on any port specified by the request.\n- In case of any low-level HW/SW internal errors.\nThe RPC returns an OK status of none of these situations is encountered.",
              "requestType": "StartBERTRequest",
              "requestLongType": "StartBERTRequest",
              "requestFullType": "gnoi.diag.StartBERTRequest",
              "requestStreaming": false,
              "responseType": "StartBERTResponse",
              "responseLongType": "StartBERTResponse",
              "responseFullType": "gnoi.diag.StartBERTResponse",
              "responseStreaming": false
            },
            {
              "name": "StopBERT",
              "description": "Stops an already in-progress BERT operation on a set of ports. The caller\nuses the BERT operation ID it previously used when starting the operation\nto stop it. The RPC is expected to return an error status in the following\nsituations:\n- When there is at least one BERT operation in progress on a port which\n  cannot be stopped in the middle of the operation (either due to lack of\n  support or internal problems).\n- When no BERT operation, which matches the given BERT operation ID, is in\n  progress or completed on any of the ports specified by the request.\n- When the BERT operation ID does not match the in progress or completed\n  BERT operation on any of the ports specified by the request.\nThe RPC returns an OK status of none of these situations is encountered.\nNote that a BERT operation is considered completed if the device has a\nrecord/history of it. Also note that it is OK to receive a stop request for\na port which has completed BERT, as long as the recorded BERT operation ID\nmatches the one specified by the request.",
              "requestType": "StopBERTRequest",
              "requestLongType": "StopBERTRequest",
              "requestFullType": "gnoi.diag.StopBERTRequest",
              "requestStreaming": false,
              "responseType": "StopBERTResponse",
              "responseLongType": "StopBERTResponse",
              "responseFullType": "gnoi.diag.StopBERTResponse",
              "responseStreaming": false
            },
            {
              "name": "GetBERTResult",
              "description": "Gets BERT results during the BERT operation or after it completes. The\ncaller uses the BERT operation ID it previously used when starting the\noperation to query it. The device is expected to keep the results for\nlast N BERT operations for some amount of time, as specified by the\nproduct requirement. This RPC is expected to return error status in the\nfollowing situations:\n- When no BERT operation, which matches the given BERT operation ID, is in\n  progress or completed on any of the ports specified by the request.\n- When the BERT operation ID does not match the in progress or completed\n  BERT operation on any of the ports specified by the request.\nThe RPC returns an OK status of none of these situations is encountered.\nNote that a BERT operation is considered completed if device has a\nrecord of it.",
              "requestType": "GetBERTResultRequest",
              "requestLongType": "GetBERTResultRequest",
              "requestFullType": "gnoi.diag.GetBERTResultRequest",
              "requestStreaming": false,
              "responseType": "GetBERTResultResponse",
              "responseLongType": "GetBERTResultResponse",
              "responseFullType": "gnoi.diag.GetBERTResultResponse",
              "responseStreaming": false
            }
          ]
        }
      ]
    }
  ],
  "scalarValueTypes": [
    {
      "protoType": "double",
      "notes": "",
      "cppType": "double",
      "csType": "double",
      "goType": "float64",
      "javaType": "double",
      "phpType": "float",
      "pythonType": "float",
      "rubyType": "Float"
    },
    {
      "protoType": "float",
      "notes": "",
      "cppType": "float",
      "csType": "float",
      "goType": "float32",
      "javaType": "float",
      "phpType": "float",
      "pythonType": "float",
      "rubyType": "Float"
    },
    {
      "protoType": "int32",
      "notes": "Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.",
      "cppType": "int32",
      "csType": "int",
      "goType": "int32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "int64",
      "notes": "Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.",
      "cppType": "int64",
      "csType": "long",
      "goType": "int64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "uint32",
      "notes": "Uses variable-length encoding.",
      "cppType": "uint32",
      "csType": "uint",
      "goType": "uint32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int/long",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "uint64",
      "notes": "Uses variable-length encoding.",
      "cppType": "uint64",
      "csType": "ulong",
      "goType": "uint64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "sint32",
      "notes": "Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.",
      "cppType": "int32",
      "csType": "int",
      "goType": "int32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "sint64",
      "notes": "Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.",
      "cppType": "int64",
      "csType": "long",
      "goType": "int64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "fixed32",
      "notes": "Always four bytes. More efficient than uint32 if values are often greater than 2^28.",
      "cppType": "uint32",
      "csType": "uint",
      "goType": "uint32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "fixed64",
      "notes": "Always eight bytes. More efficient than uint64 if values are often greater than 2^56.",
      "cppType": "uint64",
      "csType": "ulong",
      "goType": "uint64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "sfixed32",
      "notes": "Always four bytes.",
      "cppType": "int32",
      "csType": "int",
      "goType": "int32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "sfixed64",
      "notes": "Always eight bytes.",
      "cppType": "int64",
      "csType": "long",
      "goType": "int64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "bool",
      "notes": "",
      "cppType": "bool",
      "csType": "bool",
      "goType": "bool",
      "javaType": "boolean",
      "phpType": "boolean",
      "pythonType": "boolean",
      "rubyType": "TrueClass/FalseClass"
    },
    {
      "protoType": "string",
      "notes": "A string must always contain UTF-8 encoded or 7-bit ASCII text.",
      "cppType": "string",
      "csType": "string",
      "goType": "string",
      "javaType": "String",
      "phpType": "string",
      "pythonType": "str/unicode",
      "rubyType": "String (UTF-8)"
    },
    {
      "protoType": "bytes",
      "notes": "May contain any arbitrary sequence of bytes.",
      "cppType": "string",
      "csType": "ByteString",
      "goType": "[]byte",
      "javaType": "ByteString",
      "phpType": "string",
      "pythonType": "str",
      "rubyType": "String (ASCII-8BIT)"
    }
  ]
}